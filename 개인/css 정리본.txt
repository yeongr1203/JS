-shift + alt + 방향키
	//위에 줄 복사

** 선택자의 종류
1. 태그 선택자 : 태그명 { 속성1:속성값1; 속성2:속성값2; }
2. 클래스 선택자 (. 사용) : .클래스명 { 속성1:속성값1; 속성2:속성값2; } 
3. 아이디 선택자 (# 사용) : #아이디 { 속성1:속성값1; 속성2:속성값2; } 
4. 전체 선택자 : * { 속성1:속성값1; 속성2:속성값2; } 

** 선택자가 중복된다면? (important를 사용하면 무조건 적용된다)
	// ①자세하면 우선순위가 높아진다.
	// ②같은 우선순위면 뒷쪽에 적힌게 적용된다.

- ul태그에서 점을 없애는 방법
	//ul { list-style: none;}
- a href 태그에서 하이퍼링크의 파란색 글자를 없애는 방법
	//a { text-decoration: none; color: black;}

- a href="#"
	//a태그를 활성화는 시키지만 이동을 하지는 않을때 사용

** a, a[href], a[href='#3'], a[target][href]의 차이
	//a : a태그 전체 적용
	//a[href] : href가 있는 쪽에만 적용
	//a[href='#3'] : a태그중 #3에게 적용
	// a[target][href] : target과 href가 있는 것에만 적용


● letter-spacing:숫자 = 크기 만큼 스페이스 공간의 간격설정
● line-height:숫자 = 글자 하나하나의 공간의 간격
● text-align: center = 중앙정렬(텍스트만 가능, 중앙정렬할 공간이 있어야 가능하다)
● margin:0 auto; = 중앙정렬(많이 사용은 안함)
● line-height: 숫자 = 글자의 숫자배 만큼 줄간격을 설정
● border:1px solid #ccc = 테두리 생성 축약형으로 1px만큼 solid형태로 #ccc 색으로 만듬
● border: 1px solid transparent; = 1px 실선의 투명 테두리(transparent : 투명)
● border-collapse: collapse; = 테두리의 선을 한줄로 합치는 역할
● text-shadow: 3px 2px 5px #000; = 그림자 생성(가로 세로 퍼짐정도 색상 순으로 입력)
● caption-side: bottom; = 테이블의 제목을 아래로 변경
● font-weight: bold; = 굵은 글자 표현
(참고-em : 상대적인 크기를 의미)
● border-radius; = 테두리를 둥글게 가능(border-radius: 50%;=>원으로 표현)
	//border-top-left-radius: 20px; =왼쪽 위에만 둥글게 해라(원하는 부분만 적용도 가능)
● box-sizing: border-box; = 전체 box사이즈 고정
● display: inline-block; = 인라인 속성(쉽게 글이라고 생각하면 된다.)과 블락 속성도 쓸수 있게 변경
● cursor: pointer; = 커서를 가까이 갔을때 클릭 가능하게 하는 방법
	//a태그를 사용하면 글자위에서만 활성화가 되지만 cursor: pointer; 를 사용하면 여백에 가까이 가도 가능하다.
● background: url('url주소') : 배경 이미지 설정
	//기본값이 repeat이므로 반복되는게 싫다면 no-repeat으로 바꾸어야한다.
● ::first-letter : 첫번째 글자 스타일 지정
● background-clip : 테두리 설정되는 범위
	//padding-box; = 테두리를 뺀 패딩범위까지 적용
	//content-box; = 콘텐츠(내용)부분에만 적용(박스 밖에 공간이 존재하게 보인다.)
	//border-box; = 가장 외곽인 테두리까지 적용(기본값)
● background-repeat : 반복
	//repeat(반복), repeat-x(가로 반복), repeat-y(세로 반복), no-repeat(반복X)
● text-decoration-line: none; = a태그 밑줄없애는 방법
	//== text-decoration: none;
● scroll-behavior: smooth; = 페이지 이동시 부드럽게
● target="_blank" = 새창으로 오픈


** Rem과 em의 개념
- Rem : html(16px)의 폰트 사이즈로 값이 정해진다.(전체 사이즈를 변결 할 때 주로 사용)
	//ex)html : font-size : 16px =>1rem = 16px

- em : 부모의 사이즈를 기준으로 변경한다.
	//ex) font-size : 10px가정
	<div class="cls1">
	   <div class="cls">
	   </div>
	</div>
	</body>
	
	=>.cls1 { font-size:2em; } = 20px (cls1의 부모는 바디라서 10px * 2)
	=>.cls2 { font-size:2em; } = 40px (cls2의 부모는 cls1임으로 20px * 2)

** width, height는 숫자로 크기를 지정할 수 있지만 비율(가변형)로도 가능하다.
   =>숫자로 할때는 그 크기만큼 고정되지만 비율로 설정할 경우에는 부도의 크기에 따라 달라진다.
ex)
<div class="box1">
        <div class="box2"></div>
</div>				
	//box2는 box1안에 있는 구조이고 box1사이즈는 고정, box2사이즈는 가변형일 경우
	=>box1이 고정 사이즈라면 box2는 box1이 변하지 않는 이상 고정되어 있다.
	//그리고 아무리 자식이라고 해도 테두리는 살짝 벗어난다. 그래서 계산을 해서 사이즈를 조절하거나 border-collapse: collapse; 를 사용 해서 테두리를 합쳐주면 된다.


** 박스 사이즈 설정시 매딩이나 마진을 주게되면 실제 사이즈가 변한다.
ex)내용 200픽셀 * 100픽셀 => 실제 박스는 상하좌우 10픽셀씩을 주게 되면 합쳐서 220픽셀 * 120픽셀 이된다. =>전체 사이즈를 200에 100으로 하고 싶다면 box-sizing: border-box; 를 사용하여 원하는 사이즈를 고정 시켜준다.


** margin 값에 따른 설정위치 (padding도 동일한 순서로 적용)-시계방향
ex)#margin1 { margin: 50px} : margin 공간에 50픽셀씩 준다.-주로 사용
   #margin2 { margin: 30px 50px} : 위아래는 30픽셀, 좌우에는 50픽셀
   #margin3 { margin: 30px 20px 50px} : 위는 30픽셀, 좌우는 20픽셀, 아래는 50픽셀
   #margin4 { margin: 10px 20px 30px 40px} : 위 10픽셀, 오른쪽 20픽셀, 아래 30픽셀, 왼쪽 40픽셀 -주로 사용


** disply속성값
block : 한줄을 다 차지
inline : 필요한 만큼만 공간차지 함으로 width, hight는 사용할 수 없다.
inline-block : padding이나 마진을 넣고 싶으면 이 속성을 사용해야한다.
none : 공간도 차지 안하고 화면에 표시하고 싶지않을때

-화면에 안보이게 하면서 공간차지하는거
 visibility : 안보이지만 공간차지는 한다.
 opacity : 투명도값을 줘서 안보이게 한다. => 수정은 용이하지만 요즘은 디자인쪽에서 처리해서 비추


** 더 디테일한 스타일 적용을 하기위한 표현법
- 연결 선택자에 따른 표현법
① A, B { list-style: none;} : 둘다 적용(A와 B)
② A B { list-style: none;} : 부모A의 자식인 B에게 적용 (A에 속한 B라면 모두 다) => 하위선택자(descendant selector)
③ A > B { list-style: none;} : 부모A의 첫번째 자식B에게만 적용(그 이후의 B에게는 적용안됨) => 자식선택자(child selector)
④ A + B { list-style: none;} : A의 형제인 B의 요소 중 첫 번째 B => 인접 형제 선택자(adjacent selector)
⑤ A ~ B { list-style: none;} : A이후에 나오는 B는 모두 다~ 적용(같은 층에 존재 해야한다.) => 형제 선택자(sibling selector)

- 부모기준으로 표현하는 방법
① section:first-child : 부모기준으로 첫번째 section(=section:nth-child(1))
② section:last-child : 부모기준으로 마지막 section
③ section:not(first-child) : 부모기준으로 첫번째 section 빼고 모두
④ section:nth-child(2n) : 짝수번째 section(순서는 0부터 시작)
⑤ section:nth-child(2n-1) : 홀수번째 section(순서는 0부터 시작)


- 속성 선택자
[class = button] : class가 'button'
[class ~= button] : class안에 버튼이 포함되면 모두(단어로 존재해야한다.)
a[title ~= 'us'] : us만 있는 a태그
div[class ~= button] : and조건으로 div면서 class에 버튼이 있으면 적용
a[title |= 'us'] : title이 us만있거나 us-로 시작된 속성값인 a태그
[title ^= 'eng'] : title의 시작만하면 eng인 경우에 적용(eng든 eng-든 eng_ 모두 적용)

<div ddd="engasosnkdn">어떤것</div>	
	//ddd : 사용자 정의속성(없는 속성이지만 만들어서 사용하고 적용도 시킬수 있다.)
[title $= 'eng'] : title 끝이 eng인는 경우(확장자명으로 적용할때 간혹 사용)
a[href *= 'naver'] : 어느위치에 있던 지정된 속성값이 적용(★)


- 구조 가상 선택자
.navi a:link : a태그가 링크를 방문하기 전에
.navi a:visited : a태그의 링크를 방문하고 나면
.navi a:hover : 마우스를 올렸을때
.navi a:focus : 키보드 이벤트-input/textarea/select/a 관련/(유사-.navi a:active-클릭되는 순간)
	** (★★★)
	:focus는 키보드 이벤트로에 반응할 수 있는 엘리멘트 or 사용	자의 input(click, drag 등)에 반응할 수 있는 엘리먼트에 존재
	img, input, textarea, select, a, 나머지 태그들은 tabindex(tabindex="1"/tab했을때 이동하는 순서)속성을 주게되면 가능
	 ex)div:focus => tabindex="1"를 넣어야 가능/ 없으면 불가능


 .contents p:nth-child(7) 	//contents밑에 7번째 p인 자식
 .contents :nth-child(7)	//contents밑에 7번째 자식
 .contents p:nth-last-child(1) {color:  pink;} //contents밑에 마지막 자식 p(끝에서 순서 시작)

 .contents p:nth-of-type(3)	//contents밑에 p태그 중의 3번째
 
 .contents :nth-child(odd)	//홀수 = .contents :nth-child(2n+1)
 .contents :nth-child(even)	//짝수 = .contents :nth-child(2n)
 응용=> 3씩 증가도 가능 : .contents :nth-child(3n+1) { color: red;}

** 홀수(odd)/짝수(even)의 활용
.contents p:nth-of-type(even) {color: blue;}
	//p타입중의 짝수
.contents h2:nth-of-type(even) {color: green;}
	//h2타입중의 짝수


** :target의 활용
응용1)  #sec1:target img { width: 600px;}
	//sec1로 이동했을때 이미지 크기가 커지도록 활용도 가능
	//div[id^='sec]:target img { width: 600px;} : id가 sec으로 시작하는 곳에 위치하면 이미지가 커지도록 가능(속성선택자로 여러줄이 아니라 한줄로 표현가능
응용2)  #sec3:target { background: url('images/3.jpg') no-repeat; width: 500px;}
	//sec3으로 이동했을때 이미지가 나타나도록 설정
	//div로 설정된거면 높이를 높여서 이미지가 나올정도로 높여줘야한다.



- 가상 요소★★★ ('::' 이 특징)
::first-line = 첫 번째 줄
::first-letter = 첫번째 글자
::before : 왼쪽에 배치
::after : 오른쪽에 배치

li .new : li 자식들 중에 new클래스를 가지고 있는 애들(li 본인 빼고)
li.new : li 본인이 new클래스를 가지고 있어야한다. (li이면서 class에도 속해야한다.)
	//li.new::after : li의 클래스에 new가 곳에 속성을 오른쪽에 배치해라
li.new::after { 
            content: '!!!!'	
        }
	//content는 필수라서 ' ' 넣을게 없어도 빈칸이라도 삽입


** float 와 clear : 레이아웃
	//float : 인라인처럼 붙어서 연결되고 clear을 해야 다음으로 넘어 간다.
 ex) <style>
        #box1 { background: #ffd800; float: left;}
        #box2 { background: #0094ff; float: left;}		
        #box3 { background: #00ff21; clear: both;}	
        #box4 { background: #a874ff; }
      </style>
			//clear을 하지 않으면 float영향으로 박스2번과 박스3번이 붙는다.


** position ★★★ (inline태그는 disply이용해서 위치를 이동하는게 좋다.)
- static : 기본값 /위치조정 불가(left, right, top, bottom 사용불가)
- relative : static과 유사함/차이점 : 위치조정가능(left, right, top, bottom 사용가능)
- absolute : relative 유사(left, right, top, bottom 사용가능)/부모가 꼭 있어야하고 부모가 될 수 있는건 static제외한 모두 부모가 가능 (아래나 위, 좌나 우 둘 중에 하나는 부여하는게 좋다-예상불가라서)
	//한개의 내용안에서 크기를 지정할때 사용을 많이 함
- fixed : 고정 (사이트에서 스크롤을 내려도 항상 같은 위치에 고정되어 있게 설정)
	//사진위치를 고정하면서 글이 있는 경우 글이 가려질 수 있으므로 주의!!
	//간단한 해결 방법) 글에 마진을 주어 가리지 않도록 설정하면된다.
ex)
<style>
         * { margin: 0; padding: 0;}
         html, body { height: 100%;}
         #container { height: 100%; padding: 10px;}
         .item {
             display: inline-block;
             border: 1px solid gray;
             width: 100px;
             height: 200px;
             margin-right: 10px;
         }
         .item > div:nth-child(1) {height: 70%;}
         .item .info { height: 30%; background-color: aliceblue; position: relative;}
         .item .info div:first-child { position: absolute; left: 5px; top: 5px;}	
     </style>
</head>
<body>
    <div id="container">
        <div class="item">
            <div>이미지</div>
            <div class="info">
                <div>내용</div>
            </div>
        </div>
		//1) position을 아무한테도 적용안했을때 : absolute의 부모는 body가 된다.
		//2) position을 item에 적용 : absolute의 부모는 item이 된다.
		//3) position을 info에 적용 : absolute의 부모는 info가 된다.
		
		//결론) static은 위치가 이동이 안되고 absolute의 부모도 될 수 없다.
		//     absolute는 부모를 기준으로 위치이동을 한다!!


** 투명도 설정
- 안드로이드는 앞에 2자리가 투명도
- 웹은 뒤에 2자리가 투명도
	//16진수표현법 : 색은 6자리로 표현하는데 끝에 두자리를 추가해서 투명도를 설정한다.(ex-#00000080;=>50%투명도)
	//rgb표현법 : 기본 rgb표현법에 0.0(완벽한 투명)~ 1.0(불투명)중에 원하는 투명도를 지정해서 넣어준다.(ex-rgb(0, 0, 0, 0.5);=>50%투명도)


** opacity : 투명도 효과
	//애니메이션을 줄때 opacity : 0 ->opacity : 1 로 변하게 하면 없어질때 점점 투명해지면서 없어진다.
ex1) 부모가 opacity 0.5이면
	자식이 opacity 1이라도 0.5가 적용(0.5 * 1 = 0.5)
ex1) 부모가 opacity 0.5이면 
	자식이 opacity 0.5이라도 0.25가 적용(0.5 * 0.5 = 0.25)
	=부모가 1인데 자식을 0.25한거와 같은 결과가 나온다.


** 화면에 안보이게 하는 방법!!!!!!
1. display: none : 안보이고 공간차지도 안한다.
2. visibility : hidden : 안보이지만 공간차지는 한다.


** attribute와 property의 차이
-attribute (어트리뷰트)
	//문서를 작성할때 적용한값 (value='안녕'이라고 적은것) 
-property (프로퍼티)
	//웹사이트에서 text로 적으면 value값이 바뀌는데 그게 프로퍼티
	//아쉽게 css는 실시간반응이 되지않아서 attribute에만 적용되고 property는 불가


### 애니메이션 효과 ###

** transform
transform: translate(X축값, Y축값);
	//이동
	//translateX, translateY
transform: scale(비율);
	//비율만큼 확대/축소
	//scaleX, scaleY
transform: rotate(20deg);
	//20도 만큼 회전
{transform: skew(15deg);} =>형태 : skew(가로각도, 세로각도)
	//15도를 가로로 비틀기
	//skewX, skewY

응용) transform: translate만 사용하게 되면 위에 있는 텍스트까지 기울어진다.
하지만, 배경만 왜곡을 하길 원할때는 배경에 준 각도 만큼 텍스트에 -각도를 주면 해결된다.


** transition(사용시-hover됐을때만 넣으면 돌아갈때 바로 풀려 버리기 때문에 아무 효과 없는 곳에 적용해준다!!)
transition:all ease 1s; 
	//all : 모든 속성이 트랜지션 대상이된다.(기본값)-none/속성이름(background-color, width, height 이런 식으로 개별적용도 가능 = > 갯수만큼 시간을 각각 설정 해야한다.)
	//ease : 처음에는 천천히 시작해서 빨라지다가 마지막에 느려짐(기본값)-linear, ease-in, ease-out, ease-in-out, cubic-bezier(n, n, n, n) 을 사용가능
	//1s : 시간 설정

ex)
transition: background-color, width, height 1s, 1s, 5s;
	=>너비와 높이가 같이 커진다.
transition-property: background-color, width, height;		(속성)
transition-duration:  1s, 1s, 5s;	(시간)
	=>너비가 커지고 높이가 천천히 커진다.
	==transition: background-color 1s, width 1s, height 5s; (같은 결과-각각으로 설정을 따로 주는 것과 같은 효과/ease는 기본 값이라 다 생략, 혹시라도 다른 효과를 원할때는 각각으로 입력 해주면 적용가능하다.)
	//결론 : 축약으로 했을때는 이어서 사용하는게 아니라 속성값 마다 설정을 따로따로 해주는데 좋다.(붙여서 사용하면 정확히 적용이 안되니 주의!)


** z-index : 레이블을 위로 올려주는 역할
	//값이 높아야 위에 보인다.(img에 z-index:5;를 적용했기 때문에 글이 위에 보이려면 5보다 큰 값을 주어야한다.)



** overflow:hidden; - ★★
	//벗어 났을때 안보이는게 처리되는것 (핵심)-자주사용됨!
	//당사자의 영역을 벗어나는것은 안보이게 처리된다.
	//auto, scroll, visible 등 옵션이 있다.


**animation-iteration-count: infinite; : 애니메이션 무한반복



### viewport ###
	//크기에 따라 보여지는 body부분(요즘 추세는 모바일을 먼저 개발하고 웹을 만든는 경우가 많다.)

** viewport 단위
#box1 { font-size: 10vw;}
	//vw:1vw는 뷰포트 너비의 1%와 같다.
#box2 { font-size: 10vh;}
	//vh:1vh 뷰포트 높이의 1%와 같다.
#box3 { font-size: 10vmin;}
	//vmin : 뷰포트의 너비와 높이중에 작은 값을 1%
#box4 { font-size: 10vmax;}
	//vmax : 뷰포트의 너비와 높이중에 높은 값을 1%


### 미디어 쿼리 ###
표기법 : @media
ex) 
@media screen and (min-width:768px) and (max-width:1439px)	
	//사이즈가 저크기에 되면 밑에 있는게 적용된다.
	//속성 적용할때는 기본값에서 변경 되는 것만 주어도 무방하다!!
	//사이에 and가 없으면 적용이 안된다.-오류발생
	//max적용일경우, 스크린 사이즈 지정할때도 큰것부터 적어줘야 크기별로 적용된다.(작은 크기가 위에 있으면 마지막 큰 크기 이미지만 적용됨으로 순서 중요!!)
	//반대로, min인 경우는 작은 사이즈에서 큰 사이즈로 작성한다.
-참고
and : 조건1 and 조건2 and 조건3
	//모두 다 참이어야 참 
or : 조건1 or 조건2 or 조건3
	//조건 3개중에 1개라도 참이면 참


** 파일별 링크 하는 방법
- html에서 css파일을 링크할 때
	//<link rel="stylesheet" href="경로">
- css에서 또 다른 css파일을 링크할 때 사용
	//@import url('경로');



### 레이아웃 ###
## flex
 display: flex;	//인라인블락처럼 보임

머리로 그림 그리면서 이해해놓기)
main이 가로(row)방향면 cross는 세로방향 (기본값)
main이 세로(column)방향면 cross는 가로방향

 flex-direction: row; (정방향(main-가로방향, cross-세로방향)/column:역방향(main-세로방향,cross-가로방향))
	//옵션 : row(m:L->R/c:위->아래), row-reverse(m:R->L/c:위->아래)
	//column(m:위->아래/c:L->R), column-reverse(m:아래->위/c:L->R)
ex)
 display: flex;		//main이 가로방향
 flex-direction: column;//main의 내용이 세로로 변경



 ** justify-content : flex-start = main방향의 통제(기본값)
	//flex-end, center, space-around(객체 사이의 간격 동일하게), space-between(양쪽끝에 붙이고 객체사이의 간격은 동일하게), space-evenly(테두리와 객체사이 모두 간격 동일)

 ** ★ align-items: flex-start; (기본값) =cross방향의 통제/flex와 grid 둘다 사용 가능
	//flex-end, center, baseline, stretch
- flex-start: 요소들을 컨테이너의 꼭대기로 정렬합니다.
- flex-end: 요소들을 컨테이너의 바닥으로 정렬합니다.
- center: 요소들을 컨테이너의 세로선 상의 가운데로 정렬합니다.
- baseline: 요소들을 컨테이너의 시작 위치에 정렬합니다.
- stretch: 요소들을 컨테이너에 맞도록 늘립니다.(너비나 높이가 없어야한다.)

**align-items와 align-self 차이
 align-items : 부모한테 사용할 때
 align-self : 자식한테 사용할 때-혼자서 이동


** align-content : 여러 줄 사이의 간격을 지정
flex-start: 여러 줄들을 컨테이너의 꼭대기에 정렬합니다.
flex-end: 여러 줄들을 컨테이너의 바닥에 정렬합니다.
center: 여러 줄들을 세로선 상의 가운데에 정렬합니다.
space-between: 여러 줄들 사이에 동일한 간격을 둡니다.
space-around: 여러 줄들 주위에 동일한 간격을 둡니다.
stretch: 여러 줄들을 컨테이너에 맞도록 늘립니다.(너비(columne)나 높이(row일때)가 없어야한다.)


** order : 순서 변경(오른쪽: 양수/0은 원래 위치/왼쪽: 음수)
	//이동하는 칸의 숫자가 아니라 자기 자리는 모두 0의 값을 갖는데 왼쪽으로 정렬원하면 음수의 숫자를 부여, 
	//오른쪽으로 정렬 원하면 양수의 숫자를 부여


** flex-wrap 속성 
-nowrap : 모든 요소들을 한 줄에 정렬합니다.
-wrap : 요소들을 여러 줄에 걸쳐 정렬합니다. (공간이 부족하면 뒷번호를 밑에 줄로 보낸다)
-wrap-reverse : 요소들을 여러 줄에 걸쳐 반대로 정렬합니다.(공간이 부족하면 뒤에 번호를 위로 올린다.)

** flex-flow : flex-direction과 flex-wrap의 축약형(자주사용 안함)
ex) flex-flow: row wrap
	//=flex-direction: row; flex-wrap: wrap


** flex-grow : 부모의 남는 공간을 들고갔다.(숫자는 비율로 들고 가는거라서 3:5 나 300:500 나 동일)
	// flex-grow 는 0이 기본값
	예시)
	// #box1 {flex-grow: 1;} 1분에 1을 다 가지고 가겠다.

	// #box1 {flex-grow: 1;}	: 남은 공간을 1/2씩 가지고 가겠다.
           #box3 {flex-grow: 1;}	: 남은 공간을 1/2씩 가지고 가겠다.
		//같은 1:1비율이라도 내용이 박스3이 많아지면 더 많이 차지하게 된다.
		=>flex-basis: 0%; 속성을 주면 동일하게 배분가능

	// #box1 {flex-grow: 3;}	: 남은 공간을 3/4씩 가지고 가겠다.
           #box3 {flex-grow: 1;}	: 남은 공간을 1/4씩 가지고 가겠다.

** 기타 속성
max-width: 600px;  
	//600px보다 작을때는 부모크기를 따라가지만 600px보다 크면 600px에서 멈춰있는다.
gap: 10px;  
	//박스 사이의 간격
flex-basis: 200px;	
	//기본적으로 200px씩 차지하게 된다.
flex-shrink: 1;		
	//기본값 : 줄어드는 속도(숫자가 클수록 빨리 줄어든다/0을 주면 안 줄어든다.)
	//flex-wrap:wrap이 있으면 적용안된다.



## Grid (큰 레이아웃잡을때 유용)
	★★★★★align-items: center; -> 그리드에서도 사용가능!!!!!!(중앙정렬)
 grid-template-columns : 칸 너비 (칸의 갯수만큼 넣어준다.)
	//ex)grid-template-columns: 200px 200px 200px 200px;

 grid-template-rows : 줄 높이
	//ex)grid-template-rows:200px 200px;
	//grid-template-rows: minmax(100px, auto);  : 최소한 100px, 최대는 자동으로(auto) 늘어나게. =>콤마 사용 필수!!
	//minmax 함수 : 최솟값과 최댓값을 지정할 수 있는 함수입니다.

 grid-template-columns:repeat(3, 1fr);	=>콤마 사용 필수!!
	=grid-template-columns:1fr 1fr 1fr ; (콤마 사용안한다!)
	//fr : 상대적인 크기 지정(남는 공간에 대한 비율)

 grid-gap:20px 30px;	=>표준화로 gap으로 명칭이 변경됨
	//줄간격(줄과 줄사이-가로(row)) 20픽셀, 칼럼간격(칸과 칸사이-세로(column)) 30픽셀
	//=grid-column-gap:30px; 
        // grid-row-gap:20px; 

 grid-column:1/4; 	//세로 1번~4번 줄까지 차지 하겠다.
 grid-row:2/4;		//가로 2번~4번 줄까지 차지 하겠다.
 grid-column-start:1;	//column 줄 시작을 1번 부터 하겠다.

 grid-template-areas: 	//위치를 먼저 지정해주고 각각의 박스에 이름 지정만 하면 된다.
    "box1 box1 box1"
    "box2 box3 box3"
    "box2 . box4";
 grid-area:box1;	//이름 지정


** auto-fit, auto-fill의 차이(repeat의 첫번째 값으로 많이 사용된다.)
	//화면이 넓어지거나 작아졌을때 자동으로 칼럼갯수를 맞춰주는 역할
-차이점 : 남는 공간이 생겼을시 채울지 말지
	//auto-fit : 남는 공간 채우고, auto-fill : 남는 공간을 안 채운다.
	//한줄이 아닐때는 차이가 나지 않는다.

=>응용) grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
	//반복하는 횟수를 정하지 않고 너비가 변경 됐을때 자동적으로 화면에 맞춰서 보이도록 설정
	//크기 또한 minmax로 화면 크기를 변경했을때 자동적으로 변경되게 설정한다.


===================================참고하면 좋은 사이트===================================
https://mytory.net/archives/10997
	//z-index
https://yesviz.com/devices.php
	//모바일기기의 뷰포트 크기를 알 수 있는 사이트
https://flexboxfroggy.com
	//flex 개구리 게임
https://studiomeal.com/archives/533
	//grid정리 블로그(1분코딩) - 다른 내용도 좋은게 많이 있어서 시간되면 꼭 참고하기!!!!